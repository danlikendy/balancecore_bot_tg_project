from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.keyboards.menu import get_main_menu_keyboard, get_cancel_keyboard, get_confirm_keyboard, get_payment_methods_keyboard
from core.models.transaction import TransactionType
from core.services.payment import yookassa_service
from core.services.paymaster import PayMasterService
from core.services.ozon import OzonPayService
from core.services.interest import InterestService
from core.models.payment import Payment, PaymentStatus, PaymentMethod
from datetime import datetime
import re

router = Router()


class DepositStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_payment_method = State()
    confirming_deposit = State()
    processing_payment = State()


@router.callback_query(F.data == "deposit")
async def callback_deposit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.set_state(DepositStates.waiting_for_amount)
    
    deposit_text = """
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):
–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 500.50
    """
    
    await callback.message.edit_text(
        deposit_text,
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(DepositStates.waiting_for_amount)
async def process_deposit_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount_text = message.text.replace(',', '.').strip()
        amount = float(amount_text)
        
        if amount <= 0:
            await message.answer(
                "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        if amount > 1000000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
            await message.answer(
                "–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ú–∞–∫—Å–∏–º—É–º: 1,000,000 —Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
        await state.update_data(amount=amount)
        await state.set_state(DepositStates.waiting_for_description)
        
        await message.answer(
            f"–°—É–º–º–∞: <b>{amount:.2f} —Ä—É–±.</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É",
            reply_markup=get_cancel_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 500.50",
            reply_markup=get_cancel_keyboard()
        )


@router.message(DepositStates.waiting_for_description)
async def process_deposit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    description = message.text.strip() if message.text else None
    await state.update_data(description=description)
    await state.set_state(DepositStates.waiting_for_payment_method)
    
    data = await state.get_data()
    amount = data['amount']
    
    payment_text = f"""
<b>–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã</b>

–°—É–º–º–∞: <b>{amount:.2f} —Ä—É–±.</b>
–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await message.answer(
        payment_text,
        reply_markup=get_payment_methods_keyboard()
    )


@router.callback_query(F.data.startswith("payment_method_"), DepositStates.waiting_for_payment_method)
async def process_payment_method(callback: CallbackQuery, state: FSMContext, user: dict, db: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method_map = {
        "payment_method_yookassa": "yookassa",
        "payment_method_paymaster": "paymaster", 
        "payment_method_ozon": "ozon",
    }
    
    payment_method = payment_method_map.get(callback.data)
    if not payment_method:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
        return
    
    await state.update_data(payment_method=payment_method)
    await state.set_state(DepositStates.confirming_deposit)
    
    data = await state.get_data()
    amount = data['amount']
    description = data.get('description')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    service_names = {
        "yookassa": "YooKassa",
        "paymaster": "PayMaster",
        "ozon": "Ozon Pay"
    }
    service_name = service_names.get(payment_method, payment_method)
    
    confirm_text = f"""
<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>

–°—É–º–º–∞: <b>{amount:.2f} —Ä—É–±.</b>
–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{service_name}</b>

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:
    """
    
    await callback.message.edit_text(
        confirm_text,
        reply_markup=get_confirm_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "confirm", DepositStates.confirming_deposit)
async def confirm_deposit(callback: CallbackQuery, state: FSMContext, balance_repo: dict, user: dict, db: dict):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    amount = data['amount']
    description = data.get('description')
    payment_method = data.get('payment_method')
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        from core.config import settings
        
        if payment_method == "paymaster":
            payment_service = PayMasterService(settings)
            service_name = "PayMaster"
        elif payment_method == "ozon":
            payment_service = OzonPayService(settings)
            service_name = "Ozon Pay"
        else:
            payment_service = yookassa_service
            service_name = "YooKassa"
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_result = payment_service.create_payment(
            amount=amount,
            description=description or f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}",
            user_id=user.telegram_id
        )
        
        if not payment_result["success"]:
            raise Exception(payment_result["error"])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        payment = Payment(
            user_id=user.telegram_id,
            amount=amount,
            description=description,
            payment_method=payment_method,
            status=PaymentStatus.PENDING,
            yookassa_payment_id=payment_result["payment_id"],
            yookassa_confirmation_url=payment_result.get("payment_url")
        )
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = balance_repo.create_transaction(
            user_id=user.telegram_id,
            amount=amount,
            transaction_type="deposit",
            description=description or f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PayMaster (ID: {payment.id})"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_text = f"""
<b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!</b>

–°—É–º–º–∞: <b>{amount:.2f} —Ä—É–±.</b>
–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{service_name}</b>

<b>–î–ª—è –æ–ø–ª–∞—Ç—ã:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂
4. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<a href="{payment_result['payment_url']}">üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ {service_name}</a>

ID –ø–ª–∞—Ç–µ–∂–∞: <b>{payment_result['payment_id']}</b>
        """
        
        if payment_result.get("qr_code"):
            payment_text += f"\n\nüì± –ò–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥:\n{payment_result['qr_code']}"
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=get_main_menu_keyboard()
        )
            
    except Exception as e:
        error_text = f"""
<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        await callback.message.edit_text(
            error_text,
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel", DepositStates)
async def cancel_deposit(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
